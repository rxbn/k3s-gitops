---
apiVersion: v1
kind: ConfigMap
metadata:
  name: charge-report
  namespace: teslamate
  annotations:
    kustomize.toolkit.fluxcd.io/substitute: disabled
data:
  report.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o pipefail
    set -o nounset

    # only run script on first day of month
    if [ "$(date +%d)" != "01" ]; then
        echo "Script should only run on first day of month"
        exit 1
    fi

    apk add curl python3 libqrencode coreutils jq
    python3 -m ensurepip
    pip3 install qrbill

    # get all charge reports
    PGPASSWORD=${POSTGRES_PASSWORD} psql \
      --host=${POSTGRES_HOST} \
      --port=${POSTGRES_PORT} \
      --username=${POSTGRES_USER} \
      --dbname=${POSTGRES_DB} \
      --csv \
      --command="SELECT start_date, end_date, charge_energy_added, cost FROM charging_processes WHERE geofence_id = 1 AND start_date >= NOW() - INTERVAL '3 month' AND start_date <= NOW() AND charge_energy_added IS NOT NULL ORDER BY start_date ASC;" > /tmp/report.csv

    # calculate total charge cost
    TOTAL_COST=$(PGPASSWORD=${POSTGRES_PASSWORD} psql \
                  --host=${POSTGRES_HOST} \
                  --port=${POSTGRES_PORT} \
                  --username=${POSTGRES_USER} \
                  --dbname=${POSTGRES_DB} \
                  --quiet \
                  --tuples-only \
                  --no-align \
                  --no-psqlrc \
                  --command="SELECT sum(cost) FROM charging_processes WHERE geofence_id = 1 AND start_date >= NOW() - INTERVAL '3 month' AND start_date <= NOW();")

    # get current date minus three months
    START_DATE=$(date -d "3 months ago" +%Y-%m-%d)

    # get current date
    END_DATE=$(date +%Y-%m-%d)

    # generate qr code
    qrbill \
      --account "${BILL_ACCOUNT}" \
      --creditor-name "${BILL_CREDITOR_NAME}" \
      --creditor-street "${BILL_CREDITOR_STREET}" \
      --creditor-housenumber ${BILL_CREDITOR_HOUSENUMBER} \
      --creditor-postalcode ${BILL_CREDITOR_POSTALCODE} \
      --creditor-city "${BILL_CREDITOR_CITY}" \
      --amount ${TOTAL_COST} \
      --currency "CHF" \
      --language "de" \
      --extra-infos "Tesla charging ${START_DATE} - ${END_DATE}" \
      --text | qrencode -o /tmp/qr_bill.png

    # send csv with charge report to slack
    response=$(curl \
                    --silent \
                    --show-error \
                    --no-progress-meter \
                    --form file=@"/tmp/report.csv" \
                    --form "initial_comment=Total charge cost for ${START_DATE} - ${END_DATE}: CHF ${TOTAL_COST}" \
                    --form "channels=#${SLACK_CHANNEL}" \
                    --header "Authorization: Bearer ${SLACK_TOKEN}" \
                    https://slack.com/api/files.upload)

    # check if upload was successful
    [ $(jq .ok? <<< "$response" ) == true ] || \
      echo "Error sending Slack notification. $(jq -r <<< "$response")"

    # send qr code to slack
    response=$(curl \
                    --silent \
                    --show-error \
                    --no-progress-meter \
                    --form file=@"/tmp/qr_bill.png" \
                    --form "initial_comment=Bill ${START_DATE} - ${END_DATE}: CHF ${TOTAL_COST}" \
                    --form "channels=#${SLACK_CHANNEL}" \
                    --header "Authorization: Bearer ${SLACK_TOKEN}" \
                    https://slack.com/api/files.upload)

    # check if upload was successful
    [ $(jq .ok? <<< "$response" ) == true ] || \
      echo "Error sending Slack notification. $(jq -r <<< "$response")"

    exit 0
